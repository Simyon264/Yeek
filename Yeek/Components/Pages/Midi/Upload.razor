@page "/upload"

@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject IAntiforgery Antiforgery
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Yeek - MIDI Sharing</PageTitle>

<h1>Upload</h1>

<p>Please follow proper etiquette, this site is meant to be a neat sharing platform. Don't start edit wars.<br/>For more info, see the FAQ for how things should be labelled.</p>

<div class="upload-container">
    <p>Fields marked with a * are required.</p>

    <form id="form" method="POST" enctype="multipart/form-data">
        @{
            var token = Antiforgery.GetAndStoreTokens(HttpContextAccessor.HttpContext!);
            <input name="@token.FormFieldName" type="hidden" value="@token.RequestToken" />
        }
        <input type="file" id="file" name="file" accept=".midi,.mid"/>

        <div class="basic-info">
            <label for="trackname" class="required">Trackname:</label>
            <br/>
            <input placeholder="Sunburn" type="text" name="trackname" id="trackname" maxlength="200"/>
            <br/>
            <label for="albumname">Album:</label>
            <br/>
            <input placeholder="zero_one" type="text" name="albumname" id="albumname" maxlength="200"/>
            <br/>
            <label for="authorname">Author:</label>
            <br/>
            <input placeholder="The Living Tombstone" type="text" name="authorname" id="authorname" maxlength="200"/>
        </div>

        <div class="basic-info">
            <label for="description">Description:</label><br/>
            <textarea id="description" name="description" cols="40" rows="5" placeholder="Part of the best album TLT ever made."></textarea>
            <small>This field is not required, but is included in searches.</small>
        </div>
    </form>


    <button class="upload-button" onclick="upload()">Upload</button>
    <div class="upload-more-container">
        <input class="upload-more" type="checkbox" id="upload-more"/>
        <label for="upload-more">Upload multiple?</label>
    </div>
    <p class="error-text hidden" id="error-text"></p>
    <p class="errornt-text hidden" id="result-text"></p>
</div>

<script>
    async function upload() {
        const form = document.getElementById('form');
        const formData = new FormData(form);

        const file = formData.get("file");

        // Validate required fields
        if (!file || (file instanceof File && file.size === 0)) {
            showError("Please select a MIDI file to upload.");
            return;
        }

        // Clear previous error
        document.getElementById('error-text').classList.add('hidden');
        showResult("Please wait...")

        try {
            const result = await fetch("/upload/midi", {
                body: formData,
                method: "post",
            });

            if (!result.ok) {
                if (result.status === 409) {
                    const text = await result.text();
                    showError(`This exact file has been uploaded before! <a href="${text.split('"').join('')}">Go there?</a>`);
                    return;
                }

                // Try to parse as JSON (for validation errors)
                const contentType = result.headers.get("content-type");

                if (contentType && contentType.includes("application/problem+json")) {
                    const data = await result.json();

                    if (data.errors) {
                        // Flatten into readable messages
                        const messages = [];
                        for (const [field, errs] of Object.entries(data.errors)) {
                            errs.forEach(err => messages.push(`${err}`));
                        }

                        showError(messages.join("<br>"));
                        return;
                    }
                }

                // Fallback: plain text error
                const text = await result.text();
                showError(`Failed to upload, please try again: ${text}`);
                console.error(text);
                return;
            }

            const text = await result.text();

            if (!document.getElementById("upload-more").checked) {
                location.href = `/${text}`;
            }
            showResult("Uploaded!");
        } catch (err) {
            console.error(err);
            showError("An unexpected error occurred. Please try again.");
        }
    }

    function showError(error) {
        const errorElem = document.getElementById('error-text');
        errorElem.innerHTML = error;
        errorElem.classList.remove('hidden');
        document.getElementById('result-text').classList.add('hidden');
    }

    function showResult(result) {
        const element = document.getElementById("result-text");

        element.innerHTML = result;
        element.classList.remove('hidden');
    }
</script>