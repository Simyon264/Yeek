@page "/admin/messages"

@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Authorization
@using Yeek.Core.Models
@using Yeek.Core.Repositories
@using Yeek.Security.Model

@inject IHttpContextAccessor HttpContextAccessor
@inject IAntiforgery Antiforgery

@attribute [Authorize]

<PageTitle>Yeek - Admin: Global Messages</PageTitle>

@if (User == null || User.TrustLevel < TrustLevel.Admin)
{
    <p class="error-text">Not enough permissions to view this content. Nerd</p>
    return;
}

<h3>Site Notifications</h3>


<table>
    <tr>
        <th>Id</th>
        <th>Header</th>
        <th>Content</th>
        <th>Show</th>
        <th>Actions</th>
    </tr>
    @foreach (var message in _messages)
    {
        <tr>
            <td>@message.Id</td>
            <td>@message.Header</td>
            <td>@message.Content</td>
            <td>@message.Show</td>
            <td>
                <button type="button" onclick="toggleshow(@message.Id)">Toggle Shown</button>
                <button type="button" onclick="editheader(@message.Id)">Edit Header</button>
                <button type="button" onclick="editcontent(@message.Id)">Edit Content</button>
            </td>
        </tr>
    }
</table>

<h4>Add New Global Message</h4>
<form id="new-message-form" method="POST" enctype="multipart/form-data" action="/admin/messages">
    @{
        var token = Antiforgery.GetAndStoreTokens(HttpContextAccessor.HttpContext!);
        <input name="@token.FormFieldName" type="hidden" value="@token.RequestToken" />
    }
    <label for="header">Header:</label>
    <input type="text" id="header" name="header" required />
    <br />
    <label for="content">Content:</label>
    <textarea type="text" id="content" name="content" required></textarea>
    <br />
    <button type="submit">Add Message</button>
</form>

<script>
    async function toggleshow(id) {
        await fetch(`/admin/messages/${id}/toggle`, {
            method: 'PATCH',
        });
        location.reload();
    }

    async function editheader(id) {
        const newHeader = prompt('Edit header:');
        if (newHeader === null) return;
        await fetch(`/admin/messages/${id}/header`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(newHeader)
        });
        location.reload();
    }

    async function editcontent(id) {
        const raw = prompt('Edit content (use \\n for newlines):');
        if (raw === null) return;

        // Replace literal backslash-n sequences with actual newline characters
        const newContent = raw.replace(/\\n/g, "\n");

        await fetch(`/admin/messages/${id}/content`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(newContent)
        });
        location.reload();
    }
</script>

@code {
    [CascadingParameter]
    public User? User { get; set; }

    [Inject]
    private IAdminRepository AdminRepository { get; set; } = null!;

    private List<GlobalMessage> _messages = [];

    protected override async Task OnParametersSetAsync()
    {
        if (User == null || User.TrustLevel < TrustLevel.Moderator)
        {
            HttpContextAccessor.HttpContext!.Response.StatusCode = 403;
            return;
        }

        _messages = await AdminRepository.GetAllMessagesAsync();
        HttpContextAccessor.HttpContext!.Response.StatusCode = 200;
    }
}